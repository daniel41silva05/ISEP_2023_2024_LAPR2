package pprog.repository;

import pprog.domain.Collaborator;
import pprog.domain.GenerateTeam;
import pprog.domain.Skill;

import java.util.ArrayList;
import java.util.List;

/**
 * Repository class for managing teams generated by the GenerateTeam class.
 */
public class GenerateTeamRepository {

    /**
     * List to store the generated teams.
     */
    private List<GenerateTeam> teamList;

    /**
     * Constructs a new GenerateTeamRepository with an empty list of teams.
     */
    public GenerateTeamRepository() {
        teamList = new ArrayList<>();
    }

    /**
     * Retrieves the list of teams stored in this repository.
     *
     * @return The list of teams.
     */
    public List<GenerateTeam> getTeamList() {
        return teamList;
    }

    /**
     * Generates a team based on the given criteria.
     *
     * @param minSize          The minimum size of the team.
     * @param maxSize          The maximum size of the team.
     * @param requiredSkills   The list of required skills for the team.
     * @param collaboratorList The list of available collaborators.
     * @return A list of collaborators forming the generated team.
     */
    public List<Collaborator> team(int minSize, int maxSize, List<Skill> requiredSkills, List<Collaborator> collaboratorList) {
        List<Collaborator> newTeams = new ArrayList<>();
        GenerateTeam team = new GenerateTeam(minSize, maxSize, requiredSkills);

        if (addTeam(team)) {
            List<Collaborator> collaboratorsWithSkills = team.seeColaboratorsWithSkillsNeeded(collaboratorList, requiredSkills);
            List<Collaborator> generatedTeams = team.generateRandomTeam(collaboratorsWithSkills, maxSize, minSize);
            newTeams.addAll(generatedTeams);
        }
        return newTeams;
    }

    /**
     * Adds a team to the repository if it passes validation.
     *
     * @param team The team to be added.
     * @return True if the team was added successfully, false otherwise.
     */
    private boolean addTeam(GenerateTeam team) {
        boolean success = false;
        if (validateTeam(team)) {
            success = teamList.add(team.clone());
        }
        return success;
    }

    /**
     * Validates whether a team can be added to the repository.
     *
     * @param team The team to be validated.
     * @return True if the team is valid and can be added, false otherwise.
     */
    private boolean validateTeam(GenerateTeam team) {
        return !teamList.contains(team);
    }

    /**
     * Adds a list of teams to the repository if they pass validation.
     *
     * @param teams The list of teams to be added.
     * @return The number of teams added successfully.
     */
    public int addTeams(List<GenerateTeam> teams) {
        int count = 0;
        for (GenerateTeam team : teams) {
            if (addTeam(team)) {
                count++;
            }
        }
        return count;
    }
}
