@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

actor "Green Spaces\nManager" as GSM
participant ":ConsultTasksUI" as UI
participant ":ConsultTasksController" as CTRL
participant "authenticationRepository:\nAuthenticationRepository" as authentication
participant "user:\nUserSession" as user
participant ":Agenda" as agenda
participant ":Repositories" as REP
participant "repositories\n:Repositories" as REPS
participant "toDoList:\nToDoList" as toDoList
participant ":TaskMapper" as taskMAPPER
participant "taskDto\n:TaskDto" as taskDTO
participant "tasksListDto\n:List<TaskDto>" as taskListDTO
participant "entry\n:Entry" as ENTRY

activate GSM

    GSM -> UI : requests to consult tasks
    activate UI

        UI -> CTRL** : create

        UI -> CTRL : requestData()
        activate CTRL

            CTRL -> UI : requestStartDate()
            deactivate CTRL

            UI -> UI : prompt user for start date
            activate UI

            UI -> UI : parse startDate
            deactivate UI

            UI -> UI : prompt user for end date
            activate UI

            UI -> UI : parse endDate
            deactivate UI

            CTRL --> UI : startDate, endDate
            deactivate CTRL

        CTRL -> authentication : getCurrentUserSession()
        activate authentication

            authentication --> CTRL : authenticationFacade
            deactivate authentication

            CTRL -> user : getUserId()
            activate user

                user --> CTRL : email
                deactivate user

            CTRL --> CTRL : email
            deactivate CTRL

        CTRL -> REP : getInstance()
        activate REP

            REP --> CTRL : repositories
            deactivate REP

            CTRL -> REPS : getAgenda()
            activate REPS

                REPS --> CTRL : agenda
                deactivate REPS

                CTRL -> agenda : getTasksForCollaboratorBetweenDates(email, startDate, endDate)
                activate agenda

                    agenda -> ENTRY** : create()

                    loop For each entry in agenda

                        agenda -> ENTRY: entry
                        activate ENTRY

                        ENTRY --> agenda : entry
                        deactivate ENTRY

                        agenda -> taskDTO: entryToDTO(entry)
                        activate taskDTO

                            taskDTO -> taskMAPPER: entryToDTO(entry)
                            activate taskMAPPER

                                taskMAPPER -> taskDTO : create()

                            taskMAPPER --> taskDTO : taskDTO
                            deactivate taskMAPPER

                        taskDTO --> agenda : taskDTO
                        deactivate taskDTO

                    end

                agenda --> CTRL : entriesList
                deactivate agenda

            CTRL --> UI : entriesList
            deactivate CTRL

    UI --> GSM : displays tasks
    deactivate UI

deactivate GSM

@enduml
