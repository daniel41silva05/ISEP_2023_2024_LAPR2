@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false


autonumber

'hide footbox

actor "HRM" as HRM
participant ":CreateJobUI" as UI
participant ":CreateJobController" as CTRL
participant ":Repositories" as RepositorySingleton
participant "repositories\n:Repositories" as PLAT
'participant "jobCategoryRepository:\nJobCategoryRepository" as TaskCategoryRepository
participant ":ApplicationSession" as _APP
participant "appSession\n:ApplicationSession" as APP
participant "currentSession\n:UserSession" as SESSAO
participant "organizationRepository:\nOrganizationRepository" as OrganizationRepository
participant "hrm\n:HRM" as HRM
participant "job\n:Job" as JOB

activate HRM

        HRM -> UI : asks to create a new job

        activate UI

            create CTRL
            UI -> CTRL** : create

            UI -> CTRL : getJobList

            CTRL -> UI : jobList

            UI --> HRM : shows all jobs category existing to date or asks to create one

            HRM --> UI : selects an option

            UI --> HRM : requests data (name, description)

'            UI -> CTRL : getTaskCategories()
            activate CTRL

                CTRL -> RepositorySingleton : getInstance()
                activate RepositorySingleton

                    RepositorySingleton --> CTRL: repositories
                deactivate RepositorySingleton

'                CTRL -> PLAT : getTaskCategoryRepository()
'                activate PLAT

'                    PLAT --> CTRL: taskCategoryRepository
'                deactivate PLAT

'                CTRL -> TaskCategoryRepository : getTaskCategories()
'                activate TaskCategoryRepository

'                    TaskCategoryRepository --> CTRL : taskCategoryList
'                deactivate TaskCategoryRepository

'                CTRL --> UI : taskCategoryList
'            deactivate CTRL

'            UI --> HRM : shows task category list\n and asks to sleect one
'        deactivate UI

'    HRM -> UI : selects a task category
'    activate UI

'        UI --> HRM : requests data
'    deactivate UI

    HRM -> UI : types requested data (name, description)
    activate UI

'        UI --> HRM : shows selected category and requested data
'    deactivate UI

    HRM -> UI : submits data
    activate UI

        UI -> CTRL : createJob(name,description,reference)
        activate CTRL

'            CTRL -> CTRL : getJobCategoryByDescription(taskCategoryDescription)
'            activate CTRL

                CTRL -> RepositorySingleton : getInstance()
                activate RepositorySingleton

                    RepositorySingleton --> CTRL: repositories
                deactivate RepositorySingleton

'                CTRL -> PLAT : getTaskCategoryRepository()
'                activate PLAT
'
'                    PLAT -> CTRL : taskCategoryRepository
'                deactivate PLAT

'                CTRL -> TaskCategoryRepository : getTaskCategoryByDescription(taskCategoryDescription)
'                activate TaskCategoryRepository

'                    TaskCategoryRepository --> CTRL : taskCategory
'                deactivate TaskCategoryRepository
'                    CTRL --> CTRL : taskCategory
            deactivate CTRL

            |||
            CTRL -> CTRL : getEmployeeFromSession()
            activate CTRL

                CTRL -> _APP: getInstance()
                activate _APP
                    _APP -> CTRL: appSession
                deactivate _APP


                CTRL -> APP: getCurrentSession()
                activate APP

                    APP --> CTRL: currentSession
                deactivate APP

                CTRL -> SESSAO: email = getUserEmail()
                activate SESSAO

                    SESSAO --> CTRL: email
                deactivate SESSAO


                CTRL -> PLAT: getOrganizationRepository(email)
                activate PLAT

                    PLAT --> CTRL: organizationRepository
                deactivate PLAT


                CTRL -> OrganizationRepository: getOrganizationByEmployeeEmail(email)
                activate OrganizationRepository

                    loop [for each organization
                        OrganizationRepository -> HRM : anyEmployeeHasEmail(email)
                        activate HRM

                             HRM --> OrganizationRepository : true/false
                        deactivate HRM
                    end
                    OrganizationRepository --> CTRL : organization
                deactivate OrganizationRepository

                CTRL -> HRM: getEmployeeByEmail(email)
                activate HRM

                    HRM --> CTRL : employee
                deactivate HRM

                CTRL --> CTRL : employee
            deactivate CTRL

            |||
            CTRL -> HRM: createJob(name, description,reference ,  hrm)
            activate HRM

                HRM -> JOB**: create(employee, reference, description,  hrm)
                HRM -> HRM: addJob (job)


                activate HRM
                    HRM -> HRM: validateJob(job)
                    activate HRM
                        HRM --> HRM
                    deactivate HRM

                    HRM --> HRM
                deactivate HRM

                HRM --> CTRL : job

            deactivate HRM

            CTRL --> UI: job
            deactivate CTRL
            UI --> HRM: displays operation success
    deactivate UI

deactivate HRM

@enduml