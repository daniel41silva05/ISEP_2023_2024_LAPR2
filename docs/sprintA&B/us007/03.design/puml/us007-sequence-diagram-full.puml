@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

autonumber

'hide footbox
actor "Fleet Manager" as FM
participant ":CreateCheckUpUI" as UI
participant ":CreateCheckUpController" as CTRL
participant ":Repositories" as RepositorySingleton
participant "repositories\n:Repositories" as PLAT
'participant "taskCategoryRepository:\nTaskCategoryRepository" as TaskCategoryRepository
'participant ":ApplicationSession" as _APP
'participant "appSession\n:ApplicationSession" as APP
'participant "currentSession\n:UserSession" as SESSAO
participant "organizationRepository:\nOrganizationRepository" as OrganizationRepository
participant "organization\n:Organization" as ORG
participant "checkup\n:CheckUp" as CHECKUP

activate FM

        FM -> UI : asks to create a new check-up

        activate UI

            UI --> FM : requests data (plate number, KMS, date)
            create CTRL
            UI -> CTRL** : create

            UI -> CTRL : checkUpRepository()
            activate CTRL

                CTRL -> RepositorySingleton : getInstance()
                activate RepositorySingleton

                    RepositorySingleton --> CTRL: repositories
                deactivate RepositorySingleton

                CTRL -> PLAT : getcheckUpRepository()
                activate PLAT

                    PLAT --> CTRL: checkUpRepository
                deactivate PLAT

'                CTRL -> TaskCategoryRepository : getcheckUpRepository()
'                activate TaskCategoryRepository

'                    TaskCategoryRepository --> CTRL : taskCategoryList
'                deactivate TaskCategoryRepository
'
                CTRL --> UI : checkUpRepository
            deactivate CTRL

            UI --> FM : shows all vehicles already \nentered in the system and asks you to select one
        deactivate UI

    FM -> UI : selects a task category
    activate UI


    FM -> UI : types requested data (reference, description, \ninformal description, technical description,\nduration, cost)
    activate UI

        UI --> FM : shows selected category and requested data
    deactivate UI

    FM -> UI : submits data
    activate UI

        UI -> CTRL : createCheckUp(reference,\ndescription,\ninformalDescription,\ntechnicalDescription,\nduration, cost,\ntaskCategoryDescription)
        activate CTRL

            CTRL -> CTRL : getTaskCategoryByDescription(taskCategoryDescription)
            activate CTRL

                CTRL -> RepositorySingleton : getInstance()
                activate RepositorySingleton

                    RepositorySingleton --> CTRL: repositories
                deactivate RepositorySingleton

                CTRL -> PLAT : getTaskCategoryRepository()
                activate PLAT

                    PLAT -> CTRL : checkUpRepository
                deactivate PLAT

                CTRL -> checkUpRepository : getTaskCategoryByDescription(taskCategoryDescription)
                activate TaskCategoryRepository

                    checkUpRepository --> CTRL : taskCategory
                deactivate TaskCategoryRepository
                    CTRL --> CTRL : taskCategory
            deactivate CTRL

            |||
'            CTRL -> CTRL : getEmployeeFromSession()
'            activate CTRL
'
'                CTRL -> _APP: getInstance()
'                activate _APP
'                    _APP -> CTRL: appSession
'                deactivate _APP

'
'                CTRL -> APP: getCurrentSession()
'                activate APP

'                    APP --> CTRL: currentSession
'                deactivate APP
'
'                CTRL -> SESSAO: email = getUserEmail()
'                activate SESSAO
'
'                    SESSAO --> CTRL: email
'                deactivate SESSAO


                CTRL -> PLAT: getOrganizationRepository(email)
                activate PLAT

                    PLAT --> CTRL: organizationRepository
                deactivate PLAT


'                CTRL -> OrganizationRepository: getOrganizationByEmployeeEmail(email)
'                activate OrganizationRepository
'
'                    loop [for each organization
'                        OrganizationRepository -> ORG : anyEmployeeHasEmail(email)
'                        activate ORG
'
'                             ORG --> OrganizationRepository : true/false
'                        deactivate ORG
'                    end
'                    OrganizationRepository --> CTRL : organization
'                deactivate OrganizationRepository

'                CTRL -> ORG: getEmployeeByEmail(email)
'                activate ORG

'                    ORG --> CTRL : employee
'                deactivate ORG
'
'                CTRL --> CTRL : employee
'            deactivate CTRL

            |||
            CTRL -> ORG: createCheckUp(employee, reference, description,\ninformalDescription, technicalDescription,\nduration, cost, , taskCategory, employee)
            activate ORG

                ORG -> CheckUp**: create(employee, reference, description,\ninformalDescription, technicalDescription,\nduration, cost, taskCategory, employee)
                ORG -> ORG: addCheckUp (checkup))


                activate ORG
                    ORG -> ORG: validateCheckUp(checkup)
                    activate ORG
                        ORG --> ORG
                    deactivate ORG

                    ORG --> ORG
                deactivate ORG

                ORG --> CTRL : CHECKUP

            deactivate ORG

            CTRL --> UI: CHECKUP
            deactivate CTRL
            UI --> FM: displays operation success
    deactivate UI

deactivate FM

@enduml